import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np

iris_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris_df = pd.read_csv(iris_url, header=None, names=["sepal_length", "sepal_width", "petal_length", "petal_width", "species"])

X = iris_df.drop("species", axis=1)
y = iris_df["species"]
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

y_pred_classes = encoder.inverse_transform(y_pred)

accuracy = accuracy_score(y_test, y_pred)
print(f"Logistic Regression Accuracy: {accuracy:.4f}")

model = Sequential()
model.add(Dense(12, activation='relu', input_dim=X_train.shape[1]))
model.add(Dense(8, activation='relu'))
model.add(Dense(3, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

y_train_onehot = pd.get_dummies(y_train)
y_test_onehot = pd.get_dummies(y_test)

model.fit(X_train, y_train_onehot, epochs=100, batch_size=32)

y_pred_nn = model.predict(X_test)
y_pred_nn_classes = np.argmax(y_pred_nn, axis=1)
nn_accuracy = accuracy_score(y_test, y_pred_nn_classes)
print("Neural Network Accuracy:", nn_accuracy)
print(classification_report(y_test, y_pred_nn_classes))
